{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Login/style.module.css","components/Navigation/navigation.module.scss","components/Users/users.module.css","components/Header/Header.module.css","enums/patch.ts","api/api.ts","redux/reducer/auth-reducer.ts","redux/reducer/app-reducer.tsx","common/hook/selectorHook.ts","redux/reducer/profile-reducer.ts","redux/reducer/dialogs-reducer.ts","redux/reducer/users-reducer.ts","redux/redux-store.ts","redux/reducer/selectors.ts","assets/images/logout.svg","assets/images/users.png","components/Header/Header.tsx","components/Navigation/Navigation.tsx","components/Dialogs/Dialogs.tsx","common/FromControls/FormControls.tsx","utils/validators.ts","components/Login/Login.tsx","assets/images/loader.gif","common/preloader/Preloader.tsx","assets/images/pencil.svg","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","assets/images/rightArrow.svg","assets/images/leftArrow.svg","common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","assets/images/post.svg","assets/images/likeNoActive.svg","assets/images/likeActive.svg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Me/Me.tsx","common/Error/Error.tsx","App.tsx","index.tsx","common/Paginator/paginator.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","common/FromControls/FormControls.module.css","common/preloader/style.module.css","common/Error/error.module.css"],"names":["module","exports","PATH","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","userId","delete","follow","post","profileAPI","status","put","photoFile","formData","FormData","append","profile","authAPI","email","password","rememberMe","captcha","securityAPI","initialState","id","undefined","login","isAuth","captchaUrl","setAuthUserDataAC","type","payload","getCaptchaUrlSuccessAC","getAuthUserDataThunk","dispatch","a","progressAC","resultCode","initializeSuccessAC","ErrorFunc","messages","Error","name","getCaptchaUrlTC","url","initialized","progress","error","value","errorAC","useAppSelector","useSelector","setTimeout","posts","v1","message","likesCount","setStatusAC","getUserProfileTC","getStatusTC","dialogs","users","totalUsersCount","isFetching","followingInProgress","followAC","unfollowAC","setCurrentPageAC","toggleIsFetchingAC","toggleIsFollowingProgressAC","getUsersTC","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","reducers","combineReducers","profilePage","state","action","newPostBody","map","e","dialogsPage","newMessageBody","usersPage","u","followed","filter","auth","form","formReducer","app","store","createStore","composeWithDevTools","applyMiddleware","thunk","selectIsAuth","selectDialogs","selectInitialized","selectProfile","selectUsers","selectError","Header","useDispatch","className","s","header","wrapper","headerLogoText","loginBlock","headerNavigateBox","avatar","src","photos","small","usersIcons","alt","btn","onClick","text","logout","logoutIcon","to","LOGIN","Navigation","cn","navigation__items","navigation","navigation__item","isActive","navigation__link","navigation__active","ME","DIALOGS","USERS","Dialogs","dialogsElements","item","messageElements","block","dialogsItems","AddMessageFormRedux","onSubmit","values","reset","reduxForm","props","handleSubmit","Field","component","placeholder","FormControl","input","meta","child","hasError","touched","styles","formControl","children","Textarea","restProps","Input","createField","validators","validate","maxLength","required","LoginReduxForm","label","inputCheckbox","style","color","Login","loginWrapper","box","subTitle","link","href","decor","length","stopSubmit","_error","Preloader","img","loading","ProfileStatus","myId","console","log","ProfileStatusEditMode","useState","editMode","setEditMode","setValue","statusInput","onChange","currentTarget","onBlur","updateStatusTC","autoFocus","onDoubleClick","statusBox","pencilDecor","pencil","ProfileDataFormReduxForm","Object","keys","contacts","key","ProfileInfo","changeAvatarBox","images","large","inputFile","file","files","dataChangesBox","title","initialValues","getState","Promise","reject","saveProfileTC","goToEditMode","edit","ProfileData","tbody","fullName","aboutMe","lookingForAJob","contactTitle","contactValue","Contact","Profile","useParams","useEffect","Number","width","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","wrapperPaginator","arrow","leftArrow","p","span","active","rightArrow","User","user","onHandlerUnfollow","bind","onHandlerFollow","PROFILE","userPhoto","nameSpan","disabled","some","Users","wrapperUsers","pageNumber","boxUser","Post","counter","counterAC","icons","postIcons","likesIcon","likesActive","likes","MyPosts","memo","myPosts","subtitle","AddPostFormRedux","maxLength10","boxBtn","Me","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.482176df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__5RQK7\",\"images\":\"ProfileInfo_images__2ZQ9B\",\"wrapper\":\"ProfileInfo_wrapper__ar6Hn\",\"label\":\"ProfileInfo_label__2k_Nw\",\"changeAvatarBox\":\"ProfileInfo_changeAvatarBox__2IZTw\",\"inputFile\":\"ProfileInfo_inputFile__2MHjY\",\"dataChangesBox\":\"ProfileInfo_dataChangesBox__1v_m_\",\"title\":\"ProfileInfo_title__3LiCi\",\"pencilDecor\":\"ProfileInfo_pencilDecor__2pCnK\",\"statusBox\":\"ProfileInfo_statusBox__1evDX\",\"statusInput\":\"ProfileInfo_statusInput__2ecQD\",\"edit\":\"ProfileInfo_edit__3RPCH\",\"tbody\":\"ProfileInfo_tbody__cjvlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"style_loginWrapper__N9tP0\",\"box\":\"style_box__3bekn\",\"subTitle\":\"style_subTitle__3q87b\",\"link\":\"style_link__32jd_\",\"text\":\"style_text__nIWJu\",\"decor\":\"style_decor__2CYM6\",\"input\":\"style_input__2QUrT\",\"label\":\"style_label__3fuOR\",\"inputCheckbox\":\"style_inputCheckbox__24xM2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"navigation_navigation__1kz7S\",\"navigation__item\":\"navigation_navigation__item__3lnvr\",\"navigation__link\":\"navigation_navigation__link__EVboG\",\"navigation__active\":\"navigation_navigation__active__3gih1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperUsers\":\"users_wrapperUsers__1WQpu\",\"boxUser\":\"users_boxUser__vAgjs\",\"wrapper\":\"users_wrapper__1O3s3\",\"userPhoto\":\"users_userPhoto__1H41c\",\"name\":\"users_name__vpwOP\",\"status\":\"users_status__3w5ee\",\"nameSpan\":\"users_nameSpan__2tpcB\",\"btn\":\"users_btn__1199v\",\"loader\":\"users_loader__3AMDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3q43m\",\"wrapper\":\"Header_wrapper__qew8b\",\"btn\":\"Header_btn__hO9Xg\",\"logout\":\"Header_logout__3j1kR\",\"text\":\"Header_text__XHZIG\",\"avatar\":\"Header_avatar__2lwXB\",\"headerLogoText\":\"Header_headerLogoText__3kfQF\",\"headerNavigateBox\":\"Header_headerNavigateBox__1LA3O\",\"login\":\"Header_login__2quml\"};","export enum PATH {\r\n    ME = '/',\r\n    PROFILE = '/profile',\r\n    DIALOGS = '/dialogs',\r\n    USERS = '/users',\r\n    LOGIN = '/login',\r\n    ERROR_404 = '404',\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../redux/reducer/users-reducer\";\r\nimport {PhotosPropsType, ProfileType} from \"../redux/reducer/profile-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': \"edbb6621-0047-4274-8a4c-f1d2a1bf4727    \"\r\n    },\r\n})\r\n\r\n\r\ntype getUserType = {\r\n    error: null\r\n    items: UserType[]\r\n    totalCount: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype AuthMeResponseType = {\r\n    id: string | undefined\r\n    email: string\r\n    login: string\r\n}\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<getUserType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>('profile/status', {status})\r\n    },\r\n    savePhoto(photoFile: string) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<ResponseType<{ photos: PhotosPropsType }>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ResponseType>(`profile`, profile);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        // return instance.get<ResponseType<{ data: AuthMeResponseType }>>('auth/me')\r\n        return instance.get('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post<ResponseType<{ data: AuthMeResponseType }>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`);\r\n    }\r\n}\r\n","import {authAPI, securityAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {errorAC, initializeSuccessAC, progressAC} from \"./app-reducer\";\r\nimport {ErrorFunc} from \"../../common/hook/selectorHook\";\r\n\r\n// type\r\nexport type InitialStateType = {\r\n    // id: number | null\r\n    id: string | undefined\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nlet initialState = {\r\n    id: undefined,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n}\r\nexport type GeneralType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof getCaptchaUrlSuccessAC>\r\n\r\n// reducer\r\nexport const authReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {...state, ...action.payload, isAuth: action.payload.isAuth}\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actionCreator\r\nexport const setAuthUserDataAC = (id: string | undefined, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'SET-USER-DATA',\r\n        payload: {\r\n            id, email, login, isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getCaptchaUrlSuccessAC = (captchaUrl: string) => {\r\n    return {\r\n        type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const\r\n}\r\n\r\n// thunk\r\nexport const getAuthUserDataThunk = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(progressAC(false))\r\n        const response = await authAPI.me()\r\n\r\n        if (response.data.resultCode === 0) {\r\n            let {id, email, login} = response.data.data\r\n            dispatch(setAuthUserDataAC(id, email, login, true))\r\n            dispatch(initializeSuccessAC(true))\r\n        }\r\n        if (response.data.resultCode === 1) {\r\n            ErrorFunc(response.data.messages[0], dispatch)\r\n        }\r\n    } catch (error) {\r\n        dispatch(initializeSuccessAC(true))\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n    }\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, Dispatch<GeneralType>, GeneralType>\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: ThunkDispatch<AppStateType, unknown, FormAction>) => {\r\n    try {\r\n        const response = await authAPI.login(email, password, rememberMe, captcha);\r\n        if (response.data.resultCode === 0) {\r\n            await dispatch(getAuthUserDataThunk());\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                await dispatch(getCaptchaUrlTC());\r\n            } else {\r\n                const message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserDataAC(undefined, null, null, false));\r\n            dispatch(initializeSuccessAC(true))\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrlTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await securityAPI.getCaptchaUrl();\r\n        const captchaUrl = response.data.url;\r\n        dispatch(getCaptchaUrlSuccessAC(captchaUrl));\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import {getAuthUserDataThunk} from \"./auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// initial state\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n    progress: boolean\r\n    error: string | null\r\n}\r\n\r\n// type\r\nlet initialState = {\r\n    initialized: false,\r\n    progress: true,\r\n    error: null,\r\n}\r\nexport type GeneralType =\r\n    ReturnType<typeof initializeSuccessAC>\r\n    | ReturnType<typeof errorAC>\r\n    | ReturnType<typeof progressAC>\r\n\r\n// reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\":\r\n            return {...state, initialized: action.value}\r\n        case \"APP-ERROR\":\r\n            return {...state, error: action.value}\r\n        case \"PROGRESS\":\r\n            return {...state, progress: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creator\r\nexport const initializeSuccessAC = (value: boolean) => {\r\n    return {\r\n        type: 'INITIALIZED-SUCCESS', value\r\n    } as const\r\n}\r\n\r\nexport const progressAC = (value: boolean) => {\r\n    return {\r\n        type: 'PROGRESS', value\r\n    } as const\r\n}\r\n\r\nexport const errorAC = (value: any) => {\r\n    return {\r\n        type: 'APP-ERROR', value\r\n    } as const\r\n}\r\n// thunk\r\nexport const initializeAppTC = () => async (dispatch: any) => {\r\n    dispatch(getAuthUserDataThunk())\r\n    // dispatch(initializeSuccessAC(true))\r\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {errorAC} from \"../../redux/reducer/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\nexport const ErrorFunc = (error: any, dispatch: Dispatch) => {\r\n    if (error) {\r\n        dispatch(errorAC(error))\r\n        setTimeout(() => {\r\n            dispatch(errorAC(null))\r\n        }, 2000)\r\n    }\r\n}","import {profileAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {v1} from \"uuid\";\r\nimport {ErrorFunc} from \"../../common/hook/selectorHook\";\r\nimport {progressAC} from \"./app-reducer\";\r\n\r\n// type\r\nexport type ContactsPropsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type PhotosPropsType = { large: string, small: string }\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsPropsType\r\n    photos: PhotosPropsType\r\n}\r\n\r\nexport type RouteType = {\r\n    likesCount: number\r\n    message: string\r\n    id: string\r\n}\r\nexport type initialType = {\r\n    posts: Array<RouteType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\ntype GlobalReducerType =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUserProfileAC>\r\n    | ReturnType<typeof setStatusAC>\r\n    | ReturnType<typeof counterAC>\r\n\r\n// initialState\r\nlet initialState: initialType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi,how are you', likesCount: 0},\r\n        {id: v1(), message: 'Hi, you', likesCount: 1},\r\n        {id: v1(), message: 'Hi,how are you', likesCount: 0},\r\n        {id: v1(), message: 'how are you', likesCount: 0}\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n}\r\n//\r\n// reduce\r\nexport const profileReducer = (state: initialType = initialState, action: GlobalReducerType): initialType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: v1(), message: action.newPostBody, likesCount: 0,}]\r\n            }\r\n        case \"SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"COUNTER\": {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.map(e => e.id === action.id ? {...e, likesCount: action.likesCount} : e)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action Creator\r\nexport const addPostAC = (newPostBody: string) => ({type: 'ADD-POST', newPostBody} as const)\r\nexport const counterAC = (id: string, likesCount: number) => ({type: 'COUNTER', id, likesCount} as const)\r\nexport const setUserProfileAC = (profile: ProfileType) => ({type: 'SET-USER-PROFILE', profile} as const)\r\nexport const setStatusAC = (status: string) => {\r\n    return ({type: 'SET-STATUS', status} as const);\r\n}\r\nexport const savePhotoSuccessAC = (photos: any) => {\r\n    return {\r\n        type: 'SAVE-PHOTO-SUCCESS',\r\n        photos\r\n    } as const\r\n}\r\n// thunk\r\nexport const getUserProfileTC = (userId: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(progressAC(true))\r\n        const response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfileAC(response.data))\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n    }\r\n}\r\nexport const getStatusTC = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(progressAC(false))\r\n            const response = await profileAPI.getStatus(userId)\r\n            dispatch(setStatusAC(response.data))\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const {name} = error\r\n                ErrorFunc(name, dispatch)\r\n            }\r\n        } finally {\r\n            dispatch(progressAC(true))\r\n        }\r\n\r\n    };\r\n}\r\nexport const updateStatusTC = (status: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(progressAC(false))\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n    }\r\n\r\n}\r\n\r\nexport const savePhotoTC = (file: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(progressAC(false))\r\n        let response = await profileAPI.savePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccessAC(response.data.data.photos))\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n    }\r\n\r\n}\r\n\r\nexport const saveProfileTC = (profile: ProfileType) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(progressAC(false))\r\n        const userId = getState().auth.id;\r\n        const response = await profileAPI.saveProfile(profile);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            // @ts-ignore\r\n            dispatch(getUserProfileTC(userId));\r\n        } else {\r\n            dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}));\r\n            return Promise.reject(response.data.messages[0]);\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            const {name} = error\r\n            ErrorFunc(name, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","// type\r\ntype DialogType = {\r\n    message: string\r\n    id: number\r\n}\r\ntype PostsType = {\r\n    name: string\r\n    id: number\r\n}\r\ntype GlobalReducerType = | ReturnType<typeof sendMessageAC>\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<PostsType>\r\n    messages: Array<DialogType>\r\n}\r\n\r\n// initialState\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Slava'},\r\n        {id: 2, name: 'Borya'},\r\n        {id: 3, name: 'Igor'},\r\n        {id: 4, name: 'Viktor'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi how are you doing'},\r\n        {id: 2, message: 'I heard that you have problems'},\r\n        {id: 3, message: 'how is your health today'},\r\n        {id: 4, message: 'Where had you been?'},\r\n    ],\r\n}\r\n\r\n// reducer\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: GlobalReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case  \"SEND-MESSAGE\":\r\n            return {...state, messages: [...state.messages, {id: 6, message: action.newMessageBody}]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action Creator\r\nexport const sendMessageAC = (newMessageBody: string) => ({type: \"SEND-MESSAGE\", newMessageBody} as const)","import {usersAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {progressAC} from \"./app-reducer\";\r\n\r\n// type\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        large: null | string\r\n        small: null | string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n}\r\ntype GlobalReducerType =\r\n    | ReturnType<typeof followAC>\r\n    | ReturnType<typeof unfollowAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setUsersTotalCountAC>\r\n    | ReturnType<typeof toggleIsFetchingAC>\r\n    | ReturnType<typeof toggleIsFollowingProgressAC>\r\n\r\n// reducer\r\nexport const usersReducer = (state: UsersType = initialState, action: GlobalReducerType): UsersType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {...state, users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)}\r\n        case \"UNFOLLOW\":\r\n            return {...state, users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)}\r\n        case \"SET-USER\":\r\n            return {...state, users: [...action.users]}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET-USERS-TOTAL-COUNT\":\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actionCreator\r\nexport const followAC = (userId: number) => ({type: 'FOLLOW', userId} as const)\r\nexport const unfollowAC = (userId: number) => ({type: 'UNFOLLOW', userId} as const)\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: 'SET-USER', users} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setUsersTotalCountAC = (totalCount: number) => ({type: 'SET-USERS-TOTAL-COUNT', totalCount} as const)\r\nexport const toggleIsFetchingAC = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETCHING', isFetching} as const)\r\nexport const toggleIsFollowingProgressAC = (isFetching: boolean, userId: any) =>\r\n    ({type: 'TOGGLE-IS-FOLLOWING-PROGRESS', isFetching, userId} as const)\r\n\r\n// thunk\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(progressAC(false))\r\n        dispatch(toggleIsFetchingAC(true))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setUsersAC(data.items))\r\n        dispatch(setUsersTotalCountAC(data.totalCount))\r\n    } catch (e) {\r\n\r\n    } finally {\r\n        dispatch(progressAC(true))\r\n        dispatch(toggleIsFetchingAC(false))\r\n    }\r\n\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleIsFollowingProgressAC(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgressAC(false, userId))\r\n}\r\n\r\nexport const followTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followAC)\r\n}\r\nexport const unfollowTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowAC)\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./reducer/profile-reducer\";\nimport {dialogsReducer} from \"./reducer/dialogs-reducer\";\nimport {usersReducer} from \"./reducer/users-reducer\";\nimport {authReducer} from \"./reducer/auth-reducer\";\nimport thunk from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport {appReducer} from \"./reducer/app-reducer\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n})\nexport type AppStateType = ReturnType<typeof reducers>\n\nexport let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))","import {AppStateType} from \"../redux-store\";\r\n\r\n//auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth\r\n\r\n//dialogs\r\nexport const selectDialogs = (state: AppStateType) => state.dialogsPage\r\n\r\n//app\r\nexport const selectInitialized = (state: AppStateType) => state.app\r\n\r\n//profile\r\nexport const selectProfile = (state: AppStateType) => state.profilePage\r\n\r\n//users\r\nexport const selectUsers = (state: AppStateType) => state.usersPage\r\n\r\n//error\r\nexport const selectError = (state: AppStateType) => state.app.error\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logout.1bf8fe5c.svg\";","export default __webpack_public_path__ + \"static/media/users.998e6aeb.png\";","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectProfile} from \"../../redux/reducer/selectors\";\r\nimport {logoutTC} from \"../../redux/reducer/auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport s from './Header.module.css'\r\nimport logoutIcon from './../../assets/images/logout.svg'\r\nimport usersIcons from \"../../assets/images/users.png\";\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {isAuth} = useAppSelector(selectIsAuth)\r\n    const {profile} = useAppSelector(selectProfile)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className='maxContainer'>\r\n                <div className={s.wrapper}>\r\n                    <div>\r\n                        <span className={s.headerLogoText}>It-incubator</span>\r\n                    </div>\r\n                    <div className={s.loginBlock}>\r\n\r\n                        {isAuth\r\n                            ? <div className={s.headerNavigateBox}>\r\n                                <img className={s.avatar} src={profile?.photos.small || usersIcons}\r\n                                     alt='avatar'/>\r\n                                <button className={s.btn} onClick={logoutHandler}>\r\n                                    <span className={s.text}>Log out</span>\r\n                                    <img className={s.logout} src={logoutIcon} alt=\"logoutIcon\"/>\r\n                                </button>\r\n                            </div>\r\n                            : <NavLink className={s.login} to={PATH.LOGIN}>Login</NavLink>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './navigation.module.scss'\r\nimport cn from 'classnames'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <div>\r\n            <ul className={cn(s.navigation__items, s.navigation)}>\r\n                <li className={s.navigation__item}>\r\n                    <NavLink\r\n                        className={({isActive}) => `${s.navigation__link} ${isActive ? s.navigation__active : ''}`}\r\n                        to={PATH.ME}>\r\n                        Me\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.navigation__item}>\r\n                    <NavLink\r\n                        className={({isActive}) => `${s.navigation__link} ${isActive ? s.navigation__active : ''}`}\r\n                        to={PATH.DIALOGS}>\r\n                        Messages\r\n                    </NavLink>\r\n                </li>\r\n\r\n                <li className={s.navigation__item}>\r\n                    <NavLink\r\n                        className={({isActive}) => `${s.navigation__link} ${isActive ? s.navigation__active : ''}`}\r\n                        to={PATH.USERS}>\r\n                        Users\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessageAC} from \"../../redux/reducer/dialogs-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectDialogs, selectIsAuth} from \"../../redux/reducer/selectors\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\n// type\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nexport const Dialogs = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {dialogs, messages} = useAppSelector(selectDialogs)\r\n    const {isAuth} = useAppSelector(selectIsAuth)\r\n\r\n\r\n    let dialogsElements = dialogs.map(({id, name}) => (<div className={s.item} key={id}>{name}</div>))\r\n    let messageElements = messages.map(({id, message}) => (<div className={s.item} key={id}>{message}</div>))\r\n\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        dispatch(sendMessageAC(values.newMessageBody))\r\n        dispatch(reset('dialogAddMessageForm'))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.block}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messageElements}\r\n                </div>\r\n            </div>\r\n\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component='textarea'\r\n                name='newMessageBody'\r\n                className='textArea'\r\n                placeholder='Enter your message'\r\n            />\r\n            <div>\r\n                <button className='btn'>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import styles from './FormControls.module.css'\nimport {Field, WrappedFieldProps} from \"redux-form\";\nimport {FC} from \"react\";\n\n\nexport type FieldValidatorType = (value: string) => string | undefined\n\nexport const FormControl = ({input, meta, child, ...props}:any) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props:any) => {\n    const {input, meta, child, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\n// @ts-ignore\nexport const Input = (props) => {\n    const {input, meta, child, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<FieldValidatorType>,\n                                                         component: FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","export const required = (value: any) => {\n    if (value) return undefined;\n\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FromControls/FormControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/reducer/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React, {FC} from \"react\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectIsAuth} from \"../../redux/reducer/selectors\";\r\nimport s from './style.module.css'\r\nimport {PATH} from \"../../enums/patch\";\r\nimport {Error} from \"../../common/Error/Error\";\r\n// type\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props: any) => {\r\n\r\n    const {\r\n        error,\r\n        captchaUrl\r\n    } = props\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/*{createField<LoginFormValuesTypeKeys>('Login', 'login', [required], Input)}*/}\r\n                <Field\r\n                    validate={[required]}\r\n                    component={Input}\r\n                    className={s.input}\r\n                    name='login'\r\n                    placeholder='Login'\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    validate={[required]}\r\n                    component={Input}\r\n                    className={s.input}\r\n                    name='password'\r\n                    placeholder='Password'\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n\r\n            <label className={s.label}>\r\n                remember me\r\n                <Field\r\n                    component={Input}\r\n                    className={s.inputCheckbox}\r\n                    name='rememberMe'\r\n                    type={'checkbox'}\r\n                />\r\n            </label>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={'captchaUrl'}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n            {error && <div style={{color: 'red'}}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\nexport const Login = () => {\r\n    const {isAuth, captchaUrl} = useAppSelector(selectIsAuth)\r\n    const dispatch = useDispatch()\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(loginTC(formData.login, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={PATH.ME}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginWrapper}>\r\n            <div className={s.box}>\r\n                <h3 className={s.subTitle}>To log in get registered <a className={s.link}\r\n                                                                       href={'https://social-network.samuraijs.com/login'}>here</a> or\r\n                    use common test account credentials:</h3>\r\n                <p className={s.text}>\r\n                    Email:\r\n                    <span className={s.decor}>  free@samuraijs.com</span>\r\n                </p>\r\n                <p className={s.text}>\r\n                    Password:\r\n                    <span className={s.decor}> free</span>\r\n                </p>\r\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/loader.65c3f468.gif\";","import React from 'react';\nimport s from './style.module.css'\nimport loading from '../../assets/images/loader.gif'\n\nexport const Preloader = () => {\n    return (\n        <div className={s.box}>\n            <img className={s.img} src={loading} alt=\"loading\"/>\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/pencil.0312b8be.svg\";","import {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatusTC} from \"../../../redux/reducer/profile-reducer\";\r\nimport pencil from '../../../assets/images/pencil.svg'\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    userId: string | undefined\r\n    myId: string | undefined\r\n}\r\n\r\nexport const ProfileStatus = (props: PropsType) => {\r\n\r\n    const {status, userId, myId} = props\r\n\r\n\r\n    console.log(status)\r\n    return (\r\n        <div>\r\n            {userId === myId\r\n                ? <ProfileStatusEditMode status={status}/>\r\n                : <span>{status || 'not status'}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileStatusEditModeType = {\r\n    status: string\r\n}\r\nconst ProfileStatusEditMode = (props: ProfileStatusEditModeType) => {\r\n    const {status} = props\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [value, setValue] = useState<string>(status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        dispatch(updateStatusTC(value))\r\n        setEditMode(false)\r\n    }\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <input\r\n                    className={s.statusInput}\r\n                    onChange={onStatusChange}\r\n                    onBlur={deactivateEditMode}\r\n                    autoFocus type=\"text\"\r\n                    placeholder={'change profile status'}\r\n                    value={value}\r\n                />\r\n                : <div onDoubleClick={activeEditMode} className={s.statusBox}>\r\n                    <b>status:</b>\r\n                    <span>{status || 'изменить статус профиля'}</span>\r\n                    <img className={s.pencilDecor} src={pencil} alt=\"pencil\"/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {initialType, ProfileType} from \"../../../redux/reducer/profile-reducer\";\r\nimport {FC} from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../common/FromControls/FormControls\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<initialType, PropsType> & PropsType> = (\r\n    {handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {(createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input))}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a\r\n                    job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile?.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfilePropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n","import s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport usersIcons from \"../../../assets/images/users.png\";\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ProfileType, savePhotoTC, saveProfileTC} from \"../../../redux/reducer/profile-reducer\";\r\nimport {useAppSelector} from \"../../../common/hook/selectorHook\";\r\nimport {selectIsAuth} from \"../../../redux/reducer/selectors\";\r\n\r\ntype propsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId: string | undefined\r\n}\r\nexport const ProfileInfo = ({profile, status, userId}: propsType) => {\r\n    const dispatch = useDispatch()\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    const {id} = useAppSelector(selectIsAuth)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files.length) {\r\n            dispatch(savePhotoTC(e.currentTarget.files[0]))\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfileTC(formData))\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.changeAvatarBox}>\r\n                <img className={s.images} src={profile.photos.large || usersIcons} alt='img'/>\r\n                {id === userId &&\r\n                    <label className={s.label}>\r\n                        change avatar\r\n                        <input className={s.inputFile} type=\"file\" onChange={onMainPhotoSelected}/>\r\n                    </label>\r\n                }\r\n            </div>\r\n\r\n            <div className={s.dataChangesBox}>\r\n                <h2 className={s.title}>User information:</h2>\r\n                <ProfileStatus status={status} myId={id} userId={userId}/>\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} goToEditMode={() => setEditMode(true)}/>}\r\n\r\n                {id === userId &&\r\n                    <button className={s.edit} onClick={() => setEditMode(!editMode)}>Edit information ✎</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    goToEditMode: () => void\r\n}\r\n\r\n// const ProfileData = ({profile, goToEditMode}: ProfileDataPropsType) => {\r\nconst ProfileData = ({profile, goToEditMode}: any) => {\r\n    return (\r\n        <table>\r\n            <tbody className={s.tbody}>\r\n            <tr>\r\n                <td>Full name:</td>\r\n                <td>{profile.fullName}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>About me:</td>\r\n                <td>{profile.aboutMe}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Looking for a job:</td>\r\n                <td>{profile.lookingForAJob ? 'yes' : 'not'}</td>\r\n            </tr>\r\n\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>:{profile.lookingForAJob}\r\n                </div>\r\n            }\r\n\r\n            <b>Contacts</b>: {\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map((key) => {\r\n                        return <div key={key}>\r\n                            {\r\n                                profile.contacts[key] !== null\r\n                                &&\r\n                                <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                            }\r\n\r\n                        </div>\r\n                    })}\r\n            </tbody>\r\n\r\n        </table>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactsPropsType) => {\r\n    return <table>\r\n        <tbody>\r\n        <tr>\r\n            <td>{contactTitle}:</td>\r\n            <td>{contactValue}</td>\r\n        </tr>\r\n        </tbody>\r\n\r\n    </table>\r\n\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectProfile} from \"../../redux/reducer/selectors\";\r\nimport {getStatusTC, getUserProfileTC} from \"../../redux/reducer/profile-reducer\";\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const {profile, status} = useAppSelector(selectProfile)\r\n    const {isAuth} = useAppSelector(selectIsAuth)\r\n    const {userId} = useParams<{ userId: string | undefined }>()\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getUserProfileTC(Number(userId)))\r\n            dispatch(getStatusTC(Number(userId)))\r\n        }\r\n    }, [userId, dispatch])\r\n\r\n    if (!isAuth) return <Navigate to={PATH.LOGIN}/>\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                userId={userId}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/rightArrow.0684657e.svg\";","export default __webpack_public_path__ + \"static/media/leftArrow.1bc5754e.svg\";","import React, {useState} from 'react';\r\n// import s from '../../components/Users/users.module.css'\r\nimport rightArrow from '../../assets/images/rightArrow.svg'\r\nimport leftArrow from '../../assets/images/leftArrow.svg'\r\n\r\nimport s from './paginator.module.css'\r\n\r\ntype propsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\nlet Paginator = ({...props}: propsType) => {\r\n    const {\r\n        pageSize,\r\n        totalUsersCount,\r\n        currentPage,\r\n        onPageChanged,\r\n        portionSize = 10,\r\n    } = props\r\n\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    return <div className={s.wrapperPaginator}>\r\n        {portionNumber > 1 &&\r\n            <button className={s.btn} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>\r\n                <img className={s.arrow} src={leftArrow} alt=\"leftArrow\"/>\r\n            </button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span\r\n                    className={`${s.span} ${currentPage === p ? s.active : ''}`}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button className={s.btn} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>\r\n                <img className={s.arrow} src={rightArrow} alt=\"rightArrow\"/>\r\n            </button>}\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport s from \"./users.module.css\";\r\nimport usersIcons from \"../../assets/images/users.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {followTC, unfollowTC, UserType} from \"../../redux/reducer/users-reducer\";\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\ntype propsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n}\r\nexport let User = ({...props}: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        user,\r\n        followingInProgress,\r\n    } = props\r\n\r\n    const onHandlerUnfollow = (id: number) => {\r\n        dispatch(unfollowTC(id))\r\n    }\r\n\r\n    const onHandlerFollow = (id: number) => {\r\n        dispatch(followTC(id))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={`${PATH.PROFILE}/${user.id}`}>\r\n                        <img\r\n                            src={user.photos.small != null ? user.photos.small : usersIcons}\r\n                            className={s.userPhoto}\r\n                            alt={'usePhoto'}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <div className={s.name}>Name: <span className={s.nameSpan}>{user.name}</span></div>\r\n                    <span className={s.status}>{user.status ? user.status : 'no status'}</span>\r\n                    {user.followed\r\n                        ? <button className={s.btn}\r\n                                  disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => onHandlerUnfollow(user.id)}>\r\n                            Unfollow\r\n                        </button>\r\n                        : <button className={s.btn} disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => onHandlerFollow(user.id)}>\r\n                            Follow\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n","import React, {useEffect} from 'react';\nimport {getUsersTC} from \"../../redux/reducer/users-reducer\";\nimport Paginator from \"../../common/Paginator/Paginator\";\nimport {User} from \"./User\";\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\nimport {selectIsAuth, selectUsers} from \"../../redux/reducer/selectors\";\nimport {useDispatch} from \"react-redux\";\nimport s from './users.module.css'\nimport {Navigate} from \"react-router-dom\";\nimport {PATH} from \"../../enums/patch\";\n\nexport const Users = () => {\n    const dispatch = useDispatch()\n    const {isAuth} = useAppSelector(selectIsAuth)\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(getUsersTC(pageNumber, pageSize))\n    }\n\n    const {users, pageSize, totalUsersCount, currentPage, followingInProgress, isFetching} = useAppSelector(selectUsers)\n\n    useEffect(() => {\n        dispatch(getUsersTC(currentPage, pageSize))\n    }, [])\n\n    if (!isAuth) {\n        return <Navigate to={PATH.LOGIN}/>\n    }\n    return <div className={s.wrapperUsers}>\n        {/*{isFetching && <img className={s.loader} src={loading} alt=\"loading\"/>}*/}\n\n        <Paginator\n            currentPage={currentPage}\n            onPageChanged={onPageChanged}\n            totalUsersCount={totalUsersCount}\n            pageSize={pageSize}\n        />\n\n        <div className={s.boxUser}>\n            {\n                users.map(u => {\n                        return (\n                            <User key={u.id}\n                                  user={u}\n                                  followingInProgress={followingInProgress}\n                            />\n                        )\n                    }\n                )\n            }\n        </div>\n    </div>\n}\n\n","export default __webpack_public_path__ + \"static/media/post.f6af492a.svg\";","export default __webpack_public_path__ + \"static/media/likeNoActive.9895b6a3.svg\";","export default __webpack_public_path__ + \"static/media/likeActive.652cec0c.svg\";","import s from \"./Post.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport postIcons from '../../../../assets/images/post.svg';\r\nimport likes from '../../../../assets/images/likeNoActive.svg'\r\nimport likesActive from '../../../../assets/images/likeActive.svg'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {counterAC} from \"../../../../redux/reducer/profile-reducer\";\r\n\r\n// type\r\ntype PostPropsType = {\r\n    message: string | undefined\r\n    likesCount: number\r\n    id: string\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        message,\r\n        likesCount,\r\n        id,\r\n    } = props\r\n\r\n\r\n    const counter = () => {\r\n        dispatch(counterAC(id, likesCount + 1))\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <div>\r\n                    <img className={s.icons} src={postIcons} alt={'logo'}/>\r\n                    <span>{message}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    {likesCount > 0\r\n                        ? <img onClick={counter} className={s.likesIcon} src={likesActive}\r\n                               alt=\"likes\"/>\r\n                        : <img onClick={counter} className={s.likesIcon} src={likes}\r\n                               alt=\"likesActive\"/>\r\n                    }\r\n                    <span>{likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport React, {memo} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/FromControls/FormControls\";\r\nimport {useAppSelector} from \"../../../common/hook/selectorHook\";\r\nimport {selectProfile} from \"../../../redux/reducer/selectors\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/reducer/profile-reducer\";\r\n\r\ntype AddPostFormType = {\r\n    newPostBody: string\r\n}\r\n\r\nexport const MyPosts = memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {posts} = useAppSelector(selectProfile)\r\n\r\n    let post = posts.map(({id, message, likesCount}) => (\r\n        <div key={`${id}${likesCount}`}>\r\n            <Post message={message} likesCount={likesCount} id={id}/>\r\n        </div>))\r\n\r\n    const addNewPost = (values: AddPostFormType) => {\r\n        dispatch(addPostAC(values.newPostBody))\r\n        dispatch(reset('postAddForm'))\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3 className={s.subtitle}>My Posts</h3>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                validate={[required, maxLength10]}\r\n                component={Textarea}\r\n                className='textArea'\r\n                name='newPostBody'\r\n                placeholder='Enter your post'\r\n            />\r\n            <div className={s.boxBtn}>\r\n                <button className='btn'>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostFormType>({form: 'postAddForm'})(AddPostForm)","import React, {useEffect} from 'react';\r\nimport {MyPosts} from \"../Profile/MyPosts/MyPosts\";\r\nimport {useAppSelector} from \"../../common/hook/selectorHook\";\r\nimport {selectIsAuth, selectProfile} from \"../../redux/reducer/selectors\";\r\nimport {getStatusTC, getUserProfileTC} from \"../../redux/reducer/profile-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ProfileInfo} from \"../Profile/ProfileInfo/ProfileInfo\";\r\nimport {PATH} from \"../../enums/patch\";\r\n\r\nexport const Me = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {id, isAuth} = useAppSelector(selectIsAuth)\r\n    const {profile, status} = useAppSelector(selectProfile)\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getUserProfileTC(Number(id)))\r\n            dispatch(getStatusTC(Number(id)))\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!isAuth) return <Navigate to={PATH.LOGIN}/>\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                userId={id}\r\n            />\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {useAppSelector} from \"../hook/selectorHook\";\r\nimport {selectError} from \"../../redux/reducer/selectors\";\r\nimport style from './error.module.css'\r\n\r\nexport const Error = () => {\r\n    const error = useAppSelector(selectError)\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.block}>\r\n                {error}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Navigation} from \"./components/Navigation/Navigation\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {useAppSelector} from \"./common/hook/selectorHook\";\r\nimport {selectError, selectInitialized} from \"./redux/reducer/selectors\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Users} from \"./components/Users/Users\";\r\nimport {Me} from \"./components/Me/Me\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Error} from \"./common/Error/Error\";\r\nimport {PATH} from \"./enums/patch\";\r\nimport {getAuthUserDataThunk} from \"./redux/reducer/auth-reducer\";\r\n\r\nexport const App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector(selectError)\r\n    const {progress} = useAppSelector(selectInitialized)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getAuthUserDataThunk())\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            {error && <Error/>}\r\n            {!progress && <div className='nav'>\r\n                <div className='statusBar'></div>\r\n            </div>}\r\n            <div className='app-wrapper'>\r\n                <Navigation/>\r\n                <Routes>\r\n                    <Route path={PATH.ME} element={<Me/>}/>\r\n                    <Route path={`${PATH.PROFILE}/:userId`} element={<Profile/>}/>\r\n                    <Route path={PATH.DIALOGS} element={<Dialogs/>}/>\r\n                    <Route path={PATH.USERS} element={<Users/>}/>\r\n                    <Route path={PATH.LOGIN} element={<Login/>}/>\r\n                    <Route path={'/*'} element={<div>error</div>}/>\r\n                </Routes>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './index.css';\r\nimport {store} from './redux/redux-store'\r\nimport ReactDOM from \"react-dom\";\r\nimport {App} from \"./App\";\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperPaginator\":\"paginator_wrapperPaginator__11cPR\",\"arrow\":\"paginator_arrow__3hN6X\",\"btn\":\"paginator_btn__1x78D\",\"active\":\"paginator_active__1lzh6\",\"span\":\"paginator_span__1Hryq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__3FNzr\",\"block\":\"Dialogs_block__Jw7X4\",\"item\":\"Dialogs_item__2eDoH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1V9iv\",\"posts\":\"MyPosts_posts__2Iz8x\",\"subtitle\":\"MyPosts_subtitle__1j497\",\"boxBtn\":\"MyPosts_boxBtn__ZY5gB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3-Ewb\",\"icons\":\"Post_icons__3WArY\",\"likesIcon\":\"Post_likesIcon__2BwZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__vKn3r\",\"error\":\"FormControls_error__3U5re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"style_img__2HQOT\",\"box\":\"style_box__2noti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"error_wrapper__1maBr\",\"block\":\"error_block__3xg_Y\"};"],"sourceRoot":""}